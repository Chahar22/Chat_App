{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","bg3.jpeg","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","bg1.jpeg","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","selectedChat","setSelectedChat","_useState3","_useState4","user","setUser","_useState5","_useState6","notification","setNotification","_useState7","_useState8","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","_asyncToGenerator","_regeneratorRuntime","mark","_callee","config","_yield$axios$post","data","wrap","_context","prev","next","title","status","duration","isClosable","position","abrupt","headers","axios","post","sent","setItem","stringify","t0","description","response","message","stop","apply","arguments","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","isInvalid","errorBorderColor","placeholder","bg","_placeholder","opacity","color","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","_useState9","_useState10","_useState11","_useState12","pic","setPic","_useState13","_useState14","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","Container","maxW","centerContent","Box","d","justifyContent","w","m","borderRadius","borderWidth","borderColor","Text","fontSize","bgImage","concat","backgroundImageUrl","Tabs","isFitted","TabList","mb","Tab","backgroundColor","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","fontFamily","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","_ChatState","handleSearch","_ref2","query","_yield$axios$get","Authorization","token","get","_x","handleRename","_ref3","_callee2","_yield$axios$put","_context2","put","chatId","chatName","handleAddUser","_ref4","_callee3","user1","_yield$axios$put2","_context3","find","u","groupAdmin","_x2","handleRemove","_ref5","_callee4","_yield$axios$put3","_context4","_x3","flexWrap","pb","ml","Spinner","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","_toConsumableArray","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","paddingBottom","paddingLeft","overflowY","Lottie","options","height","marginBottom","className","onKeyDown","margin","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","Stack","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.740a09c8.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          isInvalid\n          errorBorderColor=\"teal.300\"\n          placeholder=\"Enter Your Email Address\"\n          bg=\"#F8F8F8\"\n          _placeholder={{ opacity: 1, color: \"grey\" }}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            isInvalid\n            errorBorderColor=\"teal.300\"\n            placeholder=\"Enter Your Password\"\n            bg=\"#F8F8F8\"\n            _placeholder={{ opacity: 1, color: \"grey\" }}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"teal\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"teal\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Dummy Account\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"whatsapp_clone\");\n      data.append(\"cloud_name\", \"dif9dkm59\");\n      fetch(\"https://api.cloudinary.com/v1_1/dif9dkm59/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          isInvalid\n          errorBorderColor=\"teal.300\"\n          bg=\"#F8F8F8\"\n          _placeholder={{ opacity: 1, color: \"grey\" }}\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          isInvalid\n          errorBorderColor=\"teal.300\"\n          bg=\"#F8F8F8\"\n          _placeholder={{ opacity: 1, color: \"grey\" }}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            isInvalid\n            errorBorderColor=\"teal.300\"\n            bg=\"#F8F8F8\"\n            _placeholder={{ opacity: 1, color: \"grey\" }}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            isInvalid\n            errorBorderColor=\"teal.300\"\n            bg=\"#F8F8F8\"\n            _placeholder={{ opacity: 1, color: \"grey\" }}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"teal\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","export default __webpack_public_path__ + \"static/media/bg3.7e014094.jpeg\";","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport backgroundImageUrl from \"../bg3.jpeg\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"teal.50\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"5px\"\n        borderColor={\"teal.400\"}\n      >\n        {/* bg=\"#F0F0F0\" // Background color for visualization p={3}\n        m=\"40px 0 15px 0\" w=\"100%\" borderRadius={\"lg\"}\n        borderWidth=\"5px\" borderColor=\"teal\" >\n        <Text fontSize=\"4xl\" color=\"teal\">\n          WhatsApp\n        </Text> */}\n        <Text color=\"teal\" fontSize=\"5xl\">\n          WhatsApp\n        </Text>\n      </Box>\n      <Box\n        bg=\"white\"\n        w=\"100%\"\n        p={4}\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n        bgImage={`url(${backgroundImageUrl})`}\n      >\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab backgroundColor={\"white\"} color={\"black\"}>\n              Login\n            </Tab>\n            <Tab backgroundColor={\"white\"} color={\"black\"}>\n              Sign Up\n            </Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport backgroundImageUrl from \"../bg3.jpeg\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n// const ENDPOINT = \"http://localhost:5000\";\n//When Push \nconst ENDPOINT = \"https://whatsapp-chat-app-2xdt.onrender.com/\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n            backgroundColor={\"teal\"}\n            borderRadius=\"10px\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  <Text color={\"white\"}>\n                    {getSender(user, selectedChat.users)}\n                  </Text>\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  <Text color={\"white\"}>{selectedChat.chatName}</Text>\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            paddingBottom={1}\n            paddingLeft={1}\n            marginTop={1}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n            bgImage={`url(${backgroundImageUrl})`}\n          >\n            {loading ? (\n              <Lottie\n                options={defaultOptions}\n                height={150}\n                width={150}\n                style={{\n                  marginBottom:150,\n                  // backgroundColor:\"green\",\n                }}\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    height={27}\n                    width={60}\n                    style={{\n                      margin: 15,\n                      marginBottom: 0,\n                      marginLeft: 0,\n                      padding: 0,\n                      // backgroundColor:\"green\",\n                    }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                isInvalid\n                errorBorderColor=\"teal.300\"\n                placeholder=\"Enter a message..\"\n                bg=\"#F8F8F8\"\n                _placeholder={{ opacity: 1, color: \"grey\" }}\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  // const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"lightgrey\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","export default __webpack_public_path__ + \"static/media/bg1.1fd72eff.jpeg\";","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport backgroundImageUrl from \"../bg1.jpeg\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  const boxStyles = {\n    backgroundImage: `url(${backgroundImageUrl})`,\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    width: \"100%\",\n    height: \"300px\",\n    // You can add more background related styles here\n  };\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"#075E54\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Text fontSize=\"2xl\" fontFamily=\"Monaco\" color=\"white\">\n          {\" \"}\n          Chats\n        </Text>\n        <Box>\n          <GroupChatModal>\n            <Button\n              d=\"flex\"\n              fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n              rightIcon={<AddIcon />}\n            >\n              Create Group\n            </Button>\n          </GroupChatModal>\n        </Box>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        // bg=\"#F8F8F8\"\n        bg=\"teal.400\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n        // bgImage={`url(${backgroundImageUrl})`}\n        // // bgSize=\"cover\"\n        // bgPos=\"center\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                //38B2AC\n                bg={selectedChat === chat ? \"white\" : \"teal.400\"}\n                color={selectedChat === chat ? \"black\" : \"white\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport backgroundImageUrl from \"../../bg1.jpeg\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n  const boxStyles = {};\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n        bg=\"#128C7E\"\n        style={boxStyles}\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button color=\"white\" variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Monaco\" color=\"white\">\n          WhatsApp\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon color=\"white\" fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} exact/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}